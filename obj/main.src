; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	// Program Name: TRANSPAR
;    2	// Author(s): SomeCoolGuy
;    3	// Description: Alpha Blending.
;    4	
;    5	/* Keep these headers */
;    6	#include <tice.h>
;    7	
;    8	/* Standard headers - it's recommended to leave them included */
;    9	#include <math.h>
;   10	#include <stdio.h>
;   11	#include <stdlib.h>
;   12	#include <string.h>
;   13	
;   14	#include <graphx.h>
;   15	#include <keypadc.h>
;   16	#include <debug.h>
;   17	
;   18	#include "gfx/images.h"
;   19	#include "alpha.h"
;   20	
;   21	//#define NDEBUG
;   22	void main(void) {
_main:
	LD	HL,-10
	CALL	__frameset
;   23	    
;   24	    int xpos = 0,ypos = 32;
	LD	BC,0
	LD	(IX+-3),BC
;   25	    int oldTime, newTime;
;   26	    int i;
;   27	    bool s = true;
	LD	(IX+-4),1
;   28	    gfx_sprite_t * background = gfx_MallocSprite(160,120);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
;   29	    /*gfx_TempSprite(square,51,51);
;   30	    memset(square->data,0x09,square->width * square->height);*/
;   31	    background = gfx_ScaleSprite(hexplore,background);
	LD	BC,HL
	PUSH	BC
	LD	BC,_hexplore_data
	PUSH	BC
	CALL	_gfx_ScaleSprite
	POP	BC
	POP	BC
	LD	(IX+-7),HL
;   32	    gfx_Begin();
	CALL	_gfx_Begin
;   33	    gfx_SetPalette(images_pal,sizeof_images_pal,0);
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	LD	BC,_images_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   34	    gfx_SetTransparentColor(images_transparent_color_index);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   35	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   36	    /*gfx_SetTextTransparentColor(0x7F);
;   37	    gfx_SetTextFGColor(0xFF);
;   38	    gfx_SetTextBGColor(0x02);*/
;   39	    set_alpha_color(gfx_palette[WHITE]);
	LD	BC,(14877188)
	PUSH	BC
	CALL	_set_alpha_color
	POP	BC
;   40	    do {
L_4:
;   41	        kb_Scan();
	CALL	_kb_Scan
;   42	        gfx_FillScreen(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   43	        gfx_ScaledSprite_NoClip(background,0,0,2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   44	        if ((xpos+=10) <= 160) {
	LD	IY,(IX+-3)
	LEA	IY,IY+10
	LD	(IX+-3),IY
	LD	BC,IY
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_1
;   45	            gfx_TransparentSprite(circle,xpos,ypos);
	LD	BC,32
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,_circle_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;   46	        } else {
	JR	L_2
L_1:
;   47	            xpos = 160;
	LD	BC,160
	LD	(IX+-3),BC
;   48	#ifndef NDEBUG
;   49	            oldTime = rtc_Time();
;   50	#endif
;   51	            alpha_mask_sprite(circle,xpos,ypos);
	LD	BC,32
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,_circle_data
	PUSH	BC
	CALL	_alpha_mask_sprite
	POP	BC
	POP	BC
	POP	BC
;   52	#ifndef NDEBUG
;   53	            newTime = rtc_Time();
;   54	            dbg_sprintf(dbgout,"sprite size: %d (%d*%d)\n",circle->width,circle->height,circle->width * circle->height);
;   55	            dbg_sprintf(dbgout,"Time taken: %d\n",newTime - oldTime);
;   56	#endif
;   57	        }
L_2:
;   58	        gfx_TransparentSprite(glass,xpos-41,ypos-11);
	LD	BC,21
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	BC,IY+-41
	PUSH	BC
	LD	BC,_glass_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;   59	        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   60	        if (((xpos+=10) > 160)) break;
	LD	IY,(IX+-3)
	LEA	IY,IY+10
	LD	(IX+-3),IY
	LD	BC,IY
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_8
;   61	     } while(!(kb_Data[6] & kb_Clear));
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_4
L_8:
;   62	    if (kb_Data[6] & kb_Clear) goto end;
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_6
	JR	L_18
;   63	    
;   64	    while (!(kb_Data[6] & kb_Clear)) {
L_19:
;   65	        kb_Scan();
	CALL	_kb_Scan
;   66	        if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_17
;   67	            if (s) {
	LD	A,(IX+-4)
	OR	A,A
	JR	Z,L_10
;   68	                set_alpha_color(gfx_palette[WHITE]);
	LD	BC,(14877188)
	PUSH	BC
	CALL	_set_alpha_color
	POP	BC
;   69	            } else {
	JR	L_15
L_10:
;   70	                set_alpha_color(gfx_palette[23]);
	LD	BC,(14877230)
	PUSH	BC
	CALL	_set_alpha_color
	POP	BC
;   71	            }
L_15:
;   72	            s = !s;
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_12
	LD	BC,1
	LD	(IX+-10),BC
	JR	L_13
L_12:
	LD	BC,0
	LD	(IX+-10),BC
L_13:
	LD	A,(IX+-10)
	LD	(IX+-4),A
;   73	        } else {
	JR	L_18
L_17:
;   74	            set_alpha_color(gfx_palette[WHITE]);
	LD	BC,(14877188)
	PUSH	BC
	CALL	_set_alpha_color
	POP	BC
;   75	        }
;   76	        /*for (i = 128;i<256;i++) {
;   77	            if (s) {
;   78	                gfx_palette[i] = ((((int)gfx_palette[i]) + ((int)0x1111)) > 0xFFFF) ? 0 : gfx_palette[i]+0x1111;
;   79	            } else {
;   80	                gfx_palette[i] = ((((int)gfx_palette[i]) - ((int)0x1111)) < 0x0000) ? 0 : gfx_palette[i]-0x1111;
;   81	            }
;   82	        }
;   83	        s = !s;*/
;   84	        //if (s == -1 && gfx_palette[WHITE+128] < 0x9999) s = 1;
;   85	        //if (s == 1 && gfx_palette[WHITE+128] > 0xEEEE) s = -1;
;   86	        //gfx_BlitBuffer();
;   87	    }
L_18:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_19
L_6:
;   88	end:
;   89	    gfx_End();
	CALL	_gfx_End
;   90	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_glass_data                         IMPORT  10002   variable
;_alpha_mask_sprite                  IMPORT  -----   function
;_circle_data                        IMPORT   2603   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_set_alpha_color                    IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_images_pal                         IMPORT    256   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_hexplore_data                      IMPORT  10802   variable
;_gfx_ScaleSprite                    IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;temp14                               IX-10      3   variable
;background                            IX-7      3   variable
;s                                     IX-4      1   variable
;xpos                                  IX-3      3   variable


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


	XREF _set_alpha_color:ROM
	XREF _alpha_mask_sprite:ROM
	XREF _images_pal:ROM
	XREF _circle_data:ROM
	XREF _glass_data:ROM
	XREF _hexplore_data:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_ScaleSprite:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _malloc:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XDEF _main
	END
